module async_fifo_TB;

  parameter DATA_WIDTH = 8;  // Data width for FIFO

  // Testbench Signals
  wire [DATA_WIDTH-1:0] data_out;   // FIFO output data
  wire full, empty;                 // FIFO flags: full and empty
  reg [DATA_WIDTH-1:0] data_in;     // FIFO input data
  reg w_en, wclk, wrst_n;           // Write enable, write clock, and write reset
  reg r_en, rclk, rrst_n;           // Read enable, read clock, and read reset

  // Test Queue for Data Verification
  reg [DATA_WIDTH-1:0] wdata_q[0:255];   // Write queue for data verification
  reg [DATA_WIDTH-1:0] wdata;        // Temporary storage for read verification

  // Instantiate the Asynchronous FIFO
  asynchronous_fifo as_fifo (
      .wr_clk(wclk),
      .wrst_n(wrst_n),
      .rd_clk(rclk),
      .rrst_n(rrst_n),
      .wr_en(w_en),
      .rd_en(r_en),
      .data_in(data_in),
      .data_out(data_out),
      .full(full),
      .empty(empty)
  );
integer i;
  //////////////////////////////////////////
  // Clock Generation
  //////////////////////////////////////////
  always #10 wclk = ~wclk;  // Write clock with 20ns period
  always #35 rclk = ~rclk;  // Read clock with 70ns period

  //////////////////////////////////////////
  // Write Logic
  //////////////////////////////////////////
  initial begin
    // Initialization
    wclk = 1'b0; wrst_n = 1'b0;
    w_en = 1'b0;
    data_in = 0;

    // Reset write logic
    repeat(10) @(posedge wclk);
    wrst_n = 1'b1;

    // Write Operation Loop
   repeat(2) begin
  for (i = 0; i < 30; i = i + 1) begin
    @(posedge wclk);
    if (!full) begin  // Check if FIFO is not full
      w_en = (i % 2 == 0) ? 1'b1 : 1'b0;  // Toggle write enable every alternate cycle
      if (w_en) begin
        data_in = $random;  // Generate random data
        wdata_q[w_ptr] = data_in;  // Store data in verification queue
        w_ptr = w_ptr + 1;  // Increment write pointer
      end
    end
  end
  #50;  // Small delay between bursts
end


  //////////////////////////////////////////
  // Read Logic
  //////////////////////////////////////////
  initial begin
    // Initialization
    rclk = 1'b0; rrst_n = 1'b0;
    r_en = 1'b0;

    // Reset read logic
    repeat(20) @(posedge rclk);
    rrst_n = 1'b1;

    // Read Operation Loop
    repeat(2) begin
      for (int i = 0; i < 30; i=i+1) begin
        @(posedge rclk iff !empty);  // Read only when FIFO is not empty
        r_en = (i % 2 == 0) ? 1'b1 : 1'b0;  // Toggle read enable every alternate cycle
        if (r_en) begin
          wdata = wdata_q.pop_front();  // Pop data from verification queue
          if (data_out !== wdata) begin
            $error("Time = %0t: Comparison Failed: expected wr_data = %h, rd_data = %h", 
                   $time, wdata, data_out);
          end else begin
            $display("Time = %0t: Comparison Passed: wr_data = %h and rd_data = %h", 
                     $time, wdata, data_out);
          end
        end
      end
      #50;  // Small delay between read bursts
    end
    $finish;  // End simulation
  end

  //////////////////////////////////////////
  // Dump Waveform for Debugging
  //////////////////////////////////////////
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
  end

endmodule
